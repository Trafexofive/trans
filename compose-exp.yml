
# ======================================================================================
# VOLUMES (Named volumes managed by Docker for persistent data)
# ======================================================================================
volumes:
  portainer_data:
  prometheus_data:
  grafana_data:

# ======================================================================================
# NETWORKS
# ======================================================================================
networks:
  backend:
    driver: bridge
  devops:
    driver: bridge

# ======================================================================================
# SERVICES
# ======================================================================================
services:

  # ======================================================================================
  # BLOCK-CHAIN
  # ======================================================================================
  solidity_module:
    # Use a project prefix for container name (e.g., trans_solidity_module)
    container_name: ${PROJECT_NAME:-trans}_solidity_module
    build:
      context: ./solidity_module
      dockerfile: dockerfile
      # You could add build args here if needed, configured via .env
      # args:
      #   SOME_BUILD_ARG: ${SOME_BUILD_ARG_VAR:-default_value}
    volumes:
      - ./solidity_module:/app
    networks:
      - backend
    env_file:
      - .env # Loads variables from .env file into the container's environment
    restart: unless-stopped

  # ======================================================================================
  # BACKEND
  # ======================================================================================
  fastify_module:
    container_name: ${PROJECT_NAME:-trans}_fastify_module
    build:
      context: ./fastify_module
      dockerfile: dockerfile
      # args:
      #   NODE_VERSION: ${NODE_VERSION:-18} # Example build arg
    volumes:
      - ./fastify_module:/app
      # - ./fastify_module/database.db:/app/database.db # Consider if DB needs separate handling
    networks:
      - backend
      - devops # Allow Prometheus to scrape it
    env_file:
      - .env
    ports:
      # Expose Fastify on host using variable FASTIFY_HOST_PORT, default to 3000
      - "${FASTIFY_HOST_PORT:-3000}:3000"
    restart: unless-stopped

  # ======================================================================================
  # MANAGEMENT
  # ======================================================================================
  portainer:
    # Use variable for image tag, default to latest (pin version in .env!)
    image: portainer/portainer-ce:${PORTAINER_IMAGE_TAG:-latest}
    container_name: ${PROJECT_NAME:-trans}_portainer
    volumes:
      - portainer_data:/data
      # Use variable for Docker socket path, default to /var/run/docker.sock
      - ${DOCKER_SOCK:-/var/run/docker.sock}:/var/run/docker.sock:ro
    networks:
      - devops
    ports:
      # Expose Portainer HTTP on host using variable PORTAINER_HTTP_HOST_PORT, default 9000
      - "${PORTAINER_HTTP_HOST_PORT:-9000}:9000"
      # Optionally expose HTTPS port
      # - "${PORTAINER_HTTPS_HOST_PORT:-9443}:9443"
    restart: unless-stopped

  # ======================================================================================
  # MONITORING && DASHBOARD
  # ======================================================================================
  prometheus:
    container_name: ${PROJECT_NAME:-trans}_prometheus
    # Use variable for image tag, default to latest (pin version in .env!)
    image: prom/prometheus:${PROMETHEUS_IMAGE_TAG:-latest}
    volumes:
      - ./devops/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      # - ./devops/prometheus/alerts.yml:/etc/prometheus/alert.rules.yml:ro # If using alerts
      - prometheus_data:/prometheus
    networks:
      - devops
    ports:
      # Expose Prometheus on host using variable PROMETHEUS_HOST_PORT, default 9090
      - "${PROMETHEUS_HOST_PORT:-9090}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle' # Often useful for config reloads
      # Adjust web.listen-address if needed, default is ':9090' inside container
    restart: unless-stopped

  grafana:
    container_name: ${PROJECT_NAME:-trans}_grafana
    # Use variable for image tag, default to latest (pin version in .env!)
    image: grafana/grafana-oss:${GRAFANA_IMAGE_TAG:-latest}
    volumes:
      - grafana_data:/var/lib/grafana
      # - ./devops/grafana/provisioning:/etc/grafana/provisioning:ro # Mount provisioning if used
      # - ./devops/grafana/grafana.ini:/etc/grafana/grafana.ini:ro # Mount custom config if used
    networks:
      - devops
    ports:
      # Expose Grafana on host using variable GRAFANA_HOST_PORT, default 9091
      - "${GRAFANA_HOST_PORT:-9091}:3000"
    environment:
      # Set Grafana's root URL based on the host port configuration
      - GF_SERVER_ROOT_URL=http://localhost:${GRAFANA_HOST_PORT:-9091}
      # Optional: Set admin user/password (use secrets in production)
      # - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      # - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASS:-admin}
      - GF_PLUGINS_PREINSTALL=grafana-clock-panel # Still configurable via this line
      - GF_LOG_LEVEL=${LOG_LEVEL:-info} # Configurable via .env
    restart: unless-stopped
    depends_on:
      - prometheus
